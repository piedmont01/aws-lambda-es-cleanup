---
AWSTemplateFormatVersion: '2010-09-09'
Description: Cron Job Lambda Function
Parameters:
  DeleteAfter:
    Default: 7
    Description: Number of days to preserve
    Type: Number
  Index:
    Default: cwl
    Description: Index/indices to process comma separated, with all every index will be processed except .kibana
    Type: CommaDelimitedList
  EsEndpoint:
    Default: 
    Description: Name of Elasticsearch instance
    Type: String
  CodeBucketName:
    Default: aws-lambda-es-cleanup
    Description: S3 Bucket where the Lambda code has been uploaded.
    Type: String
Resources:
  LambdaServiceRole:
    Type: AWS::IAM::Role
    Properties:
      ManagedPolicyArns:
      - "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
      - "arn:aws:iam::aws:policy/service-role/AWSLambdaRole"
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: "/"
      Policies:
      - PolicyName: LambdaLogCreation
        PolicyDocument:
          Statement:
          - Effect: Allow
            Action:
            - logs:*
            Resource: "arn:aws:logs:*:*:*"
      - PolicyName: ESPermission
        PolicyDocument: ESPermission
          Statement:
          - Effect: Allow
            Action:
            - es.*
            Resource:
              - 'Fn::Sub': >-
                 arn:aws:es:${AWS::Region}:${AWS::AccountId}:domain/${EsEndpoint}/*
  LambdaFunction:
    Type: "AWS::Lambda::Function"
    Properties:
      Code:
        S3Bucket: !Ref CodeBucketName
        S3Key: 'es-cleanup-lambda.zip'
      Description: A trigger that deletes indexes
      Environment:
        Variables:
          es_endpoint: !Ref EsEndpoint
          index: !Ref Index
          delete_after: !Ref DeleteAfter
      FunctionName: es-cleanup-lambda
      Handler: index.handler
      MemorySize: 128
      Role: !GetAtt LambdaServiceRole.Arn
      Runtime: "python2.7"
      Timeout: 60
  ScheduledRule: 
    Type: "AWS::Events::Rule"
    Properties: 
      Description: "ScheduledRule"
      ScheduleExpression: "rate(1 days)"
      State: "ENABLED"
      Targets: 
        - 
          Arn: 
            Fn::GetAtt: 
              - "LambdaFunction"
              - "Arn"
          Id: "TargetFunctionV1"
  PermissionForEventsToInvokeLambda: 
    Type: "AWS::Lambda::Permission"
    Properties: 
      FunctionName: 
        Ref: "LambdaFunction"
      Action: "lambda:InvokeFunction"
      Principal: "events.amazonaws.com"
      SourceArn: 
        Fn::GetAtt: 
          - "ScheduledRule"
          - "Arn"
Outputs:
  myStacksRegion:
    Value:  !Ref AWS::Region
  myAccountId:
    Value: !Ref AWS::AccountId  